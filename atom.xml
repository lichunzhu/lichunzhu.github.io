<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chauncy Blog</title>
  
  <subtitle>晚来天欲雪，能饮一杯无？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="lichunzhu.github.io/"/>
  <updated>2020-01-10T16:21:15.376Z</updated>
  <id>lichunzhu.github.io/</id>
  
  <author>
    <name>Chauncy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 805: Split Array With Same Average</title>
    <link href="lichunzhu.github.io/2019/04/22/2019-4-22-LeetCode-Problem-805/"/>
    <id>lichunzhu.github.io/2019/04/22/2019-4-22-LeetCode-Problem-805/</id>
    <published>2019-04-21T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/split-array-with-same-average/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/split-array-with-same-average/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定的整数数组 A ，我们要将 A数组 中的每个元素移动到 B数组 或者 C数组中。（B数组和C数组在开始的时候都为空）</p><p>返回true ，当且仅当在我们的完成这样的移动后，可使得B数组的平均值和C数组的平均值相等，并且B数组和C数组都不为空。</p><blockquote><p><strong>示例:</strong><br><strong>输入:</strong><br>[1,2,3,4,5,6,7,8]<br><strong>输出:</strong> true<br><strong>解释:</strong> 我们可以将数组分割为 [1,4,5,8] 和 [2,3,6,7], 他们的平均值都是4.5。</p></blockquote><p><strong>注意:</strong></p><p>A 数组的长度范围为 [1, 30].<br>A[i] 的数据范围为 [0, 10000].</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>没能独立完成的题目，参考了<a href="https://blog.csdn.net/magicbean2/article/details/79831339" target="_blank" rel="noopener">[Leetcode] 805. Split Array With Same Average 解题报告</a>解出。<br>实质上题目是一个有点像DP但其实又不太DP的暴力题。<br>题目有几个可以挖掘的特性：</p><ol><li>B, C两个序列是等价的，也就是我们只要找出长度不超过n/2的序列就可以了(另一半直接减了得到)</li><li>假设最后分为了两个序列 B, C， 假设序列B的长度为k序列C长一些 (1 &lt;= k &lt;= n/2) ，则我们可得到 total_sum / n = B_sum / k = C_sum / (n - k)，则可得到B_sum = total_sum * k / n，由于B_sum一定为整数，因此 total_sum * k % n == 0，一开始我们可以对 total_sum 进行特判，如果 1 &lt;= k &lt;= n/2 的所有 k 都不满足该条件则可以提前返回 false</li><li>如果发现确实有符合条件的k，则用数组 dp[i] 保存长度为 i 的所有序列B的可能和，每个 dp[i] 为一个 unordered_set，加入 A 中某个数 num 的时候可以得到 dp[i] = dp[i] join { for each dp[i - 1] + num}，这一步我们可以采用类似背包问题时的方法，长度从大往小枚举就可以保证这次的不会被重复累积进去了(类似背包省掉 n 的那一维空间)</li><li>有了各个长度 i 对应的 set 即 dp[i] 以后，我们只需要检查相应长度 i 是否含有元素 total_sum * i / n 即可，一旦发现存在符合条件的 i，返回 true 即可，否则返回 false</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N ^ 3 * M)$<br>M为元素的组合数(恶劣情况可达$N ^ 2$)</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">splitArraySameAverage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size(), m = n / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;&gt;dp(m + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        dp[<span class="number">0</span>].insert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = accumulate(A.begin(), A.end(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">bool</span> isPossible = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum * i % n == <span class="number">0</span>) &#123;</span><br><span class="line">                isPossible = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isPossible)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : A) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = m; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> t : dp[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i].insert(t + num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum * i % n == <span class="number">0</span> &amp;&amp; dp[i].count(sum * i / n))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>这道题做完后学会了一些比较有趣的 C++ 赋值法，可能是之前太菜了都没学过：</p><ul><li>vector 求和可以用 <code>accumulate(A.begin(), A.end(), 0);</code> 最后一位 0 表示偏移量</li><li>vector 新建并赋初值可以用 <code>vector&lt;int&gt;A = vector&lt;int&gt;({1,2,3,4,5});</code> 解决</li><li>map 也可以 <code>map&lt;int&gt;S = map&lt;int&gt;({0});</code> 要想建空的就直接不要填{}就好了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/split-array-with-sam
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 446: Arithmetic Slices II - Subsequence</title>
    <link href="lichunzhu.github.io/2019/04/21/2019-4-21-LeetCode-Problem-446/"/>
    <id>lichunzhu.github.io/2019/04/21/2019-4-21-LeetCode-Problem-446/</id>
    <published>2019-04-20T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p><p>例如，以下数列为等差数列:</p><blockquote><p>1, 3, 5, 7, 9<br>7, 7, 7, 7<br>3, -1, -5, -9</p></blockquote><p>以下数列不是等差数列。</p><blockquote><p>1, 1, 2, 5, 7</p></blockquote><p>数组 A 包含 N 个数，且索引从 0 开始。该数组子序列将划分为整数序列 (P0, P1, …, Pk)，P 与 Q 是整数且满足 0 ≤ P0 &lt; P1 &lt; … &lt; Pk &lt; N。</p><p>如果序列 A[P0]，A[P1]，…，A[Pk-1]，A[Pk] 是等差的，那么数组 A 的子序列 (P0，P1，…，PK) 称为等差序列。值得注意的是，这意味着 k ≥ 2。</p><p>函数要返回数组 A 中所有等差子序列的个数。</p><p>输入包含 N 个整数。每个整数都在 $-2 ^ {31}$ 和 $2 ^ {31} -1$ 之间，另外 0 ≤ N ≤ 1000。保证输出小于 $2 ^ {31} -1$。</p><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>[2, 4, 6, 8, 10]</p><p><strong>输出：</strong>7</p><p><strong>解释：</strong><br>所有的等差子序列为：<br>[2,4,6]<br>[4,6,8]<br>[6,8,10]<br>[2,4,6,8]<br>[4,6,8,10]<br>[2,4,6,8,10]<br>[2,6,10]</p></blockquote><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>没能独立完成的题目，参考了<a href="https://www.cnblogs.com/grandyang/p/6057934.html" target="_blank" rel="noopener">[LeetCode] Arithmetic Slices II - Subsequence 算数切片之二 - 子序列</a>解出。<br>dp[i][diff] dp的数组分为两维:<br>第一维表示以第i个数字作为结尾，第二维表示公差为diff，<br>其值表示以i为结尾的公差为diff的等差数列的个数<br>枚举j &lt; i, 置diff = A[i] - A[j]:</p><ol><li>考虑等差数列只有i, j两个数的情况, ++dp[i][diff]</li><li>在j结尾的公差为diff的各数列后加上一个A[i]构成新数列, 即dp[i][diff] += dp[j][diff]</li><li>2中构成的新数列个数必然&gt;2且以A[i]结尾(防止统计重合),正好res += dp[j][diff];</li></ol><p>由于整数数目太大使用unordered_map&lt;int, int&gt;节省时间空间。<br>本题LeetCode上C++不知为何通不过(应该和常数时间有关系)，最后用了几乎一样的Python通过的。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N ^ 2)$</p><h3 id="源代码CPP"><a href="#源代码CPP" class="headerlink" title="源代码CPP"></a>源代码CPP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">int</span> i, j, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;dp(n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                ll delta = (ll)A[i] - A[j];</span><br><span class="line">                <span class="keyword">if</span> (delta &gt; INT_MAX || delta &lt; INT_MIN)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> diff = (<span class="keyword">int</span>)delta;</span><br><span class="line">                ++dp[i][diff];</span><br><span class="line">                <span class="keyword">if</span> (dp[j].count(diff)) &#123;</span><br><span class="line">                    dp[i][diff] += dp[j][diff];</span><br><span class="line">                    res += dp[j][diff];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="源代码Python"><a href="#源代码Python" class="headerlink" title="源代码Python"></a>源代码Python</h3><p>Python代码来自<a href="https://ziqiangren.github.io/" target="_blank" rel="noopener">Ziqiang</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        dp = [collections.defaultdict(int) <span class="keyword">for</span> item <span class="keyword">in</span> A]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(A)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(i):</span><br><span class="line">                dp[i][A[i] - A[j]] += <span class="number">1</span> <span class="comment">#dp[i][j]表示在index i这个点，间隔为j的序列的数量</span></span><br><span class="line">                <span class="keyword">if</span> A[i]-A[j] <span class="keyword">in</span> dp[j]: <span class="comment">#j&lt;i</span></span><br><span class="line">                    dp[i][A[i] - A[j]] += dp[j][A[i]-A[j]] <span class="comment">#为什么上面加的那一次不重复？</span></span><br><span class="line">                    total += dp[j][A[i]-A[j]] <span class="comment">#因为每次update total是根据j，不是根据i，下次才根据i</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/arithmetic-slices-ii
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1000: Minimum Cost to Merge Stones</title>
    <link href="lichunzhu.github.io/2019/03/04/2019-3-4-LeetCode-Problem-1000/"/>
    <id>lichunzhu.github.io/2019/03/04/2019-3-4-LeetCode-Problem-1000/</id>
    <published>2019-03-03T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/minimum-cost-to-merge-stones/" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-cost-to-merge-stones/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 N 堆石头排成一排，第 i 堆中有 stones[i] 块石头。</p><p>每次移动（move）需要将连续的 K 堆石头合并为一堆，而这个移动的成本为这 K 堆石头的总数。</p><p>找出把所有石头合并成一堆的最低成本。如果不可能，返回 -1 。</p><p>示例 1：</p><blockquote><p><strong>输入</strong>：stones = [3,2,4,1], K = 2<br><strong>输出</strong>：20<br><strong>解释</strong>：<br>从 [3, 2, 4, 1] 开始。<br>合并 [3, 2]，成本为 5，剩下 [5, 4, 1]。<br>合并 [4, 1]，成本为 5，剩下 [5, 5]。<br>合并 [5, 5]，成本为 10，剩下 [10]。<br>总成本 20，这是可能的最小值。</p></blockquote><p>示例 2：</p><blockquote><p><strong>输入</strong>：stones = [3,2,4,1], K = 3<br><strong>输出</strong>：-1<br><strong>解释</strong>：任何合并操作后，都会剩下 2 堆，我们无法再进行合并。所以这项任务是不可能完成的。</p></blockquote><p>示例 3：</p><blockquote><p><strong>输入</strong>：stones = [3,5,1,2,6], K = 3<br><strong>输出</strong>：25<br><strong>解释</strong>：<br>从 [3, 5, 1, 2, 6] 开始。<br>合并 [5, 1, 2]，成本为 8，剩下 [3, 8, 6]。<br>合并 [3, 8, 6]，成本为 17，剩下 [17]。<br>总成本 25，这是可能的最小值。</p></blockquote><p><strong>提示</strong>：</p><ul><li>1 &lt;= stones.length &lt;= 30</li><li>2 &lt;= K &lt;= 30</li><li>1 &lt;= stones[i] &lt;= 100</li></ul><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>dp数组有l,r,k三维，表示l~r的石子合成k堆所需的最小代价<br><strong>初始条件:</strong><br>$ f[l][l][1] = 0,l = 0, 1, 2, … , n - 1 $ 其余取 INF<br><strong>最终答案:</strong><br>$f[0][n - 1][1]$<br><strong>转移方程:</strong><br>$f[l][r][k] = min(f[l][r][k], f[l][m][1] + f[m + 1][r][k - 1]),m = l, l + K - 1, l + 2 * K - 2…$<br>$f[l][r][1] = f[l][r][K] + sum(stones[l] … stones[r])$(P.S.此处的K是题目中的大K)<br>具体看代码实现，一看就懂</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N ^ {2} \ast K)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;S;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> S[r + <span class="number">1</span>] - S[l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mergeStones</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = stones.size();</span><br><span class="line">        <span class="keyword">int</span> i, l, k, r, m;</span><br><span class="line">        <span class="keyword">if</span> ((n - <span class="number">1</span>) % (K - <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        S.clear();</span><br><span class="line">        S.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            S.push_back(S[S.size() - <span class="number">1</span>] + stones[i]);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; f(n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(K + <span class="number">1</span>, INF)));</span><br><span class="line">        <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; n; l++)</span><br><span class="line">            f[l][l][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (l = <span class="number">0</span>; l + i - <span class="number">1</span> &lt; n; l++) &#123;</span><br><span class="line">                r = l + i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">2</span>; k &lt;= K; k++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (m = l; m &lt; r; m += K - <span class="number">1</span>)</span><br><span class="line">                        f[l][r][k] = min(f[l][r][k], f[l][m][<span class="number">1</span>] + f[m + <span class="number">1</span>][r][k - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                f[l][r][<span class="number">1</span>] = f[l][r][K] + get_sum(l, r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">0</span>][n - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-to-merge-s
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 172: Factorial Trailing Zeroes</title>
    <link href="lichunzhu.github.io/2019/02/25/2019-2-25-LeetCode-Problem-172/"/>
    <id>lichunzhu.github.io/2019/02/25/2019-2-25-LeetCode-Problem-172/</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/factorial-trailing-zeroes/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个整数 <strong> n </strong>，返回 <strong> n! </strong> 结果尾数中零的数量。</p><p>示例 1:</p><blockquote><p><strong>输入</strong>: 3<br><strong>输出</strong>: 0<br><strong>解释</strong>: 3! = 6, 尾数中没有零。</p></blockquote><p>示例 2:</p><blockquote><p><strong>输入</strong>: 5<br><strong>输出</strong>: 1<br><strong>解释</strong>: 5! = 120, 尾数中有 1 个零.</p></blockquote><p><strong>说明</strong>: 你算法的时间复杂度应为 O(log n) 。</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>数学</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>以前对这道题一直有误解，今天才发现标解做个记号留存一下。<br>n!的末置0都是由2*5来的，所以只要统计1~n的数中含因子5的个数就够了，因为2明显比5多得多。<br>统计的方法也很巧妙，1~n中含因子5的个数就是n/5，因为有含2个3个因子5的情况，所以答案为$n/5 + n / 5 ^ 2 + n / 5 ^ 3$…</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(log _{2} n)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">0</span> : n / <span class="number">5</span> + trailingZeroes(n / <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/factorial-trailing-z
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="lichunzhu.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 992: Subarrays with K Different Integers</title>
    <link href="lichunzhu.github.io/2019/02/18/2019-2-18-LeetCode-Problem-992/"/>
    <id>lichunzhu.github.io/2019/02/18/2019-2-18-LeetCode-Problem-992/</id>
    <published>2019-02-17T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/subarrays-with-k-different-integers/" target="_blank" rel="noopener">https://leetcode.com/problems/subarrays-with-k-different-integers/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个正整数数组 A，如果 A 的某个子数组中不同整数的个数恰好为 K，则称 A 的这个连续、不一定独立的子数组为<strong>好子数组</strong>。</p><p>（例如，[1,2,3,1,2] 中有 3 个不同的整数：1，2，以及 3。）</p><p>返回 A 中<strong>好子数组</strong>的数目。</p><p>示例1:</p><blockquote><p>输出：A = [1,2,1,2,3], K = 2<br>输入：7<br>解释：恰好由 2 个不同整数组成的子数组：[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].</p></blockquote><p>示例2:</p><blockquote><p>输入：A = [1,2,1,3,4], K = 3<br>输出：3<br>解释：恰好由 3 个不同整数组成的子数组：[1,2,1,3], [2,1,3], [1,3,4].</p></blockquote><p>提示:</p><blockquote><p>1.1 &lt;= A.length &lt;= 20000<br>2.1 &lt;= A[i] &lt;= A.length<br>3.1 &lt;= K &lt;= A.length</p></blockquote><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>滑窗</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>最开始看到这个题目，很自然而然的想到对每个右端点，要找到构成个数刚好为k的最右边的左端点以及刚好为k+1的最右边的左端点，这两者构成的区间长度总和即为我们最后要求的答案。<br>我最开始的想法是用一个滑窗，用一个map维持滑窗中的整数种类与数目，用堆来维持每种整数最右边的元素位置，堆里的最大值和当前滑窗左端点的区间即为上文所提到的区间。<br>后面看了题解才发现自己还是太naive了，搞两个滑窗一个维护数目是k的一个维护数目是k+1的就行了。<br>代码1是用的堆和map，代码2是写了类的两个滑窗的解法。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N)$</p><h3 id="源代码1"><a href="#源代码1" class="headerlink" title="源代码1"></a>源代码1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;mp;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;q;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subarraysWithKDistinct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        mp.clear();</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())  q.pop();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; A.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = mp.find(A[i]);</span><br><span class="line">            <span class="keyword">if</span> (it == mp.end()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mp.size() == K) &#123;</span><br><span class="line">                    <span class="comment">// add answer</span></span><br><span class="line">                    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> t = q.top(); q.pop();</span><br><span class="line">                        <span class="keyword">if</span> (mp.find(t.second) != mp.end() &amp;&amp; mp[t.second] == t.first) &#123;</span><br><span class="line">                            mp.erase(t.second);</span><br><span class="line">                            l = t.first + <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mp[A[i]] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                it -&gt; second = i;</span><br><span class="line">            q.push(make_pair(i, A[i]));</span><br><span class="line">            <span class="keyword">if</span> (mp.size() == K) &#123;</span><br><span class="line">                <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> t = q.top(); q.pop();</span><br><span class="line">                    <span class="keyword">if</span> (mp.find(t.second) != mp.end() &amp;&amp; mp[t.second] == t.first) &#123;</span><br><span class="line">                        q.push(t);</span><br><span class="line">                        ans += t.first - l + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="源代码2"><a href="#源代码2" class="headerlink" title="源代码2"></a>源代码2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">20002</span>];</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Window() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(count, <span class="number">0</span>, <span class="keyword">sizeof</span>(count));</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count[x] == <span class="number">0</span>)</span><br><span class="line">            sz++;</span><br><span class="line">        count[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count[x] == <span class="number">1</span>)</span><br><span class="line">            sz--;</span><br><span class="line">        count[x]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subarraysWithKDistinct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left1 = <span class="number">0</span>, left2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        Window window1, window2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : A) &#123;</span><br><span class="line">            window1.add(x);</span><br><span class="line">            window2.add(x);</span><br><span class="line">            <span class="keyword">while</span> (window1.get_size() &gt; K)</span><br><span class="line">                window1.minus(A[left1++]);</span><br><span class="line">            <span class="keyword">while</span> (window2.get_size() &gt;= K)</span><br><span class="line">                window2.minus(A[left2++]);</span><br><span class="line">            ans += left2 - left1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/subarrays-with-k-differ
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="滑窗" scheme="lichunzhu.github.io/tags/%E6%BB%91%E7%AA%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 218: The Skyline Problem</title>
    <link href="lichunzhu.github.io/2019/01/29/2019-1-29-LeetCode-Problem-218/"/>
    <id>lichunzhu.github.io/2019/01/29/2019-1-29-LeetCode-Problem-218/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/the-skyline-problem/" target="_blank" rel="noopener">https://leetcode.com/problems/the-skyline-problem/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线（图B）。</p><p><img src="/images/in-post/post-the-skyline-problem/skyline1.png" alt> <img src="/images/in-post/post-the-skyline-problem/skyline2.png" alt></p><p>每个建筑物的几何信息用三元组 [Li，Ri，Hi] 表示，其中 Li 和 Ri 分别是第 i 座建筑物左右边缘的 x 坐标，Hi 是其高度。可以保证 0 ≤ Li, Ri ≤ INT_MAX, 0 &lt; Hi ≤ INT_MAX 和 Ri - Li &gt; 0。您可以假设所有建筑物都是在绝对平坦且高度为 0 的表面上的完美矩形。</p><p>例如，图A中所有建筑物的尺寸记录为：[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] 。</p><p>输出是以 [ [x1,y1], [x2, y2], [x3, y3], … ] 格式的“关键点”（图B中的红点）的列表，它们唯一地定义了天际线。关键点是水平线段的左端点。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。</p><p>例如，图B中的天际线应该表示为：[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]。</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>几何</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>看了<a href="http://www.cnblogs.com/easonliu/p/4531020.html" target="_blank" rel="noopener">Eason Liu 的技术博客</a>以后才明白的。</p><p>观察样例可以发现轮廓点产生在当前的最高的矩形高度发生变化时，维护动态最高的矩形高度需要使用堆来进行。其次当矩形右端点出现时，需要将堆栈中对应的左端点移出堆，这里可以使用一个map做记录打懒标记的方式保证堆顶的最高高度仍是右端点没有出现的，堆顶懒标记不为0则一直退。</p><p>将左右端点都加入排序后，依次扫描每个端点，统计查看高度变化记录轮廓点。这里还有非常重要的一点是排序方法：</p><ol><li>x不同时按x大小排</li><li>x相同，类型不同时左端点排在前面</li><li>类型相同时，左端点按高度从大往小排，右端点按高度从小往大排</li></ol><p>提一下第3点，左端点从大往小是显然的，不然x相同时可能莫名扫出多个轮廓点，右端点从小往大是可以把小点先打标记不退出，一样是避免错误统计。具体可以推两个例子就明白了。由此可以写出源代码1。</p><p>随后可以发现代码可以简化，懒标记是由于priority_queue并没有删除功能，因此可以用mutliset直接删，排序的时候只要将左节点的高度取负就可以完全实现和上文相同的排序效果，直接用pair默认排序就完了，代码可以得到极大简化，由此得到源代码2。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N * log _{2} N)$</p><h3 id="源代码1"><a href="#源代码1" class="headerlink" title="源代码1"></a>源代码1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT 1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    node(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _type): x(_x), y(_y), type(_type) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">if</span> (a.type == LEFT &amp;&amp; b.type == LEFT)</span><br><span class="line">        <span class="keyword">return</span> a.y &gt; b.y;</span><br><span class="line">    <span class="keyword">if</span> (a.type == RIGHT &amp;&amp; b.type == RIGHT)</span><br><span class="line">        <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">    <span class="keyword">return</span> a.type == LEFT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; getSkyline(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; buildings) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;node&gt;lines;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;building : buildings) &#123;</span><br><span class="line">            lines.emplace_back(building[<span class="number">0</span>], building[<span class="number">2</span>], LEFT);</span><br><span class="line">            lines.emplace_back(building[<span class="number">1</span>], building[<span class="number">2</span>], RIGHT);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(lines.begin(), lines.end(), cmp);</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>&gt;heap;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;mp;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        heap.push(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;line: lines) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.type == LEFT) &#123;</span><br><span class="line">                heap.push(line.y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++mp[line.y];</span><br><span class="line">                <span class="keyword">while</span> (!heap.empty() &amp;&amp; mp[heap.top()] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    --mp[heap.top()];</span><br><span class="line">                    heap.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = heap.top();</span><br><span class="line">            <span class="keyword">if</span> (cur != pre) &#123;</span><br><span class="line">                ans.emplace_back(line.x, cur);</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="源代码2"><a href="#源代码2" class="headerlink" title="源代码2"></a>源代码2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; getSkyline(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; buildings) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;lines;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;building : buildings) &#123;</span><br><span class="line">            lines.emplace_back(building[<span class="number">0</span>], -building[<span class="number">2</span>]);</span><br><span class="line">            lines.emplace_back(building[<span class="number">1</span>], building[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(lines.begin(), lines.end());</span><br><span class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;heap;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        heap.insert(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;line: lines) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.second &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                heap.insert(-line.second);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                heap.erase(heap.find(line.second)); <span class="comment">// 只删一个</span></span><br><span class="line">            &#125;</span><br><span class="line">            cur = *heap.rbegin();</span><br><span class="line">            <span class="keyword">if</span> (cur != pre) &#123;</span><br><span class="line">                ans.emplace_back(line.first, cur);</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/the-skyline-problem/&quot; t
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="几何" scheme="lichunzhu.github.io/tags/%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 719: Find K-th Smallest Pair Distance</title>
    <link href="lichunzhu.github.io/2019/01/19/2019-1-19-LeetCode-Problem-719/"/>
    <id>lichunzhu.github.io/2019/01/19/2019-1-19-LeetCode-Problem-719/</id>
    <published>2019-01-18T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/" target="_blank" rel="noopener">https://leetcode.com/problems/find-k-th-smallest-pair-distance/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p><p>示例 1:</p><blockquote><p>输入：<br>nums = [1,3,1]<br><br>k = 1<br><br>输出：0 <br><br>解释：<br><br>所有数对如下：<br><br>(1,3) -&gt; 2<br><br>(1,1) -&gt; 0<br><br>(3,1) -&gt; 2<br><br>因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。<br></p></blockquote><p>提示:</p><blockquote></blockquote><ol><li>2 &lt;= len(nums) &lt;= 10000.</li><li>0 &lt;= nums[i] &lt; 1000000.</li><li>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2.</li></ol><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>二分</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>对于该类题目，发现k很大的时候，基本也就和二分脱不开干系了。</p><p>我们可以注意到，将数组排序后，求出 距离 &lt;= k 的数对个数是非常简单的。</p><p>最开始的想法是扫一遍数组，对每个数字加上 k 后加个二分就可以了，二分的时候下一个数字可以直接以上一个数组满足的最大位置作为二分下界再往后分，可以节约很多时间。</p><p>由此，我们可以二分最小距离的大小，直至求出答案，具体就见代码了。</p><p>对代码需要说明的一点是，二分求出的是满足 &lt;= k 的最大设定距离，因此我们将k - 1， l + 1就能得到正好的第k个最小距离。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(log _{2} (\max(num)-\min(num)) \ast N \ast log _{2} N)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">smallestDistancePair</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, n = nums.size(), t;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> m = nums[n - <span class="number">1</span>] - nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">-1</span>, r = m + <span class="number">1</span>, mid, tmp;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">            mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                t = upper_bound(nums.begin(), nums.end(), nums[i] + mid) - nums.begin() - i - <span class="number">1</span>;</span><br><span class="line">                tmp += t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt;= k)</span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/find-k-th-smallest-pair
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分" scheme="lichunzhu.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 903: Valid Permutations for DI Sequence</title>
    <link href="lichunzhu.github.io/2019/01/02/2019-1-2-LeetCode-Problem-903/"/>
    <id>lichunzhu.github.io/2019/01/02/2019-1-2-LeetCode-Problem-903/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/valid-permutations-for-di-sequence/" target="_blank" rel="noopener">https://leetcode.com/problems/valid-permutations-for-di-sequence/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>我们给出 S，一个源于 {‘D’, ‘I’} 的长度为 n 的字符串 。（这些字母代表 “减少” 和 “增加”。）<br>有效排列 是对整数 {0, 1, …, n} 的一个排列 P[0], P[1], …, P[n]，使得对所有的 i：</p><ul><li>如果 S[i] == ‘D’，那么 P[i] &gt; P[i+1]，以及；</li><li>如果 S[i] == ‘I’，那么 P[i] &lt; P[i+1]。</li></ul><p>有多少个有效排列？因为答案可能很大，所以请返回你的答案模 10^9 + 7.</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>又一道动态规划题，涉及到对这种特殊序列的理解。</p><p>将求方案的问题拆解一下，求i长度的序列由求i-1长度的序列转换而来。</p><p>设f[i][j]为序列{0,1,…,i}以j作为结尾的排列总数。</p><p>当前字母为’D’时，显然i-1位上只能够取j+1,j+2,…i-1.但是这样可能会有重复的情况(前面的序列也有j)，这种情况我们只需要<strong>把序列中大于等于j的数全部加1，则能既满足原有性质又不产生重复</strong>(这一点拿几个例子推一下就可以了)。这样j也是可以转移的，因此有$ f[i][j] = f[i-1][j] + f[i-1][j+2] + … + f[i-1][i-1] $</p><p>当前字母为’I’时，显然i-1位上只能够取0,1,…j-1.这时仍然会有重复情况，像上文一样解决即可。同时，f[i][0]必定为0，做一下特判即可，可以得到$ f[i][j] = f[i-1][0] + f[i-1][j+2] + … + f[i-1][j-1] $</p><p>连续求和很容易用部分和技术搞定，因此复杂度只有$N^{2}$.</p><p>关于全部加1举个例子，假如前面的序列是{0,2,3,4,1}，此时我们在后面加入3，把大于等于的部分加1，新序列为{0,2,4,5,1,3}，数列大小关系不会发生改变。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N ^ {2})$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numPermsDISequence</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line">        <span class="keyword">int</span> i, j, n = S.size();</span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">202</span>][<span class="number">202</span>], sf[<span class="number">202</span>][<span class="number">202</span>];</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">memset</span>(sf, <span class="number">0</span>, <span class="keyword">sizeof</span>(sf));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = sf[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[i - <span class="number">1</span>] == <span class="string">'I'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    f[i][j] = sf[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    f[i][j] = (sf[i - <span class="number">1</span>][i - <span class="number">1</span>] - (j &gt; <span class="number">0</span> ? sf[i - <span class="number">1</span>][j - <span class="number">1</span>]: <span class="number">0</span>) + Mod) % Mod;</span><br><span class="line">                sf[i][j] = ((j &gt; <span class="number">0</span> ? sf[i][j - <span class="number">1</span>]: <span class="number">0</span>) + f[i][j]) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sf[n][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-permutations-for-
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Word，endnote使用小结</title>
    <link href="lichunzhu.github.io/2018/12/25/2018-12-25-research-word-skills/"/>
    <id>lichunzhu.github.io/2018/12/25/2018-12-25-research-word-skills/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Word引用中的题注和交叉引用"><a href="#Word引用中的题注和交叉引用" class="headerlink" title="Word引用中的题注和交叉引用"></a>Word引用中的题注和交叉引用</h3><p>1.公式编号问题，公式编号右对齐内容居中问题</p><ul><li>使用表格法，参考<a href="https://www.zhihu.com/question/19689000/answer/112328038" target="_blank" rel="noopener">苏宙行的知乎回答</a>在word里加入一个模板公式</li><li>使用制表符，参考<a href="https://jingyan.baidu.com/article/948f592421b812d80ef5f971.html" target="_blank" rel="noopener">这篇百度经验</a>文章就可以解决，不过感觉表格更好</li><li>需要注意的是，使用表格法插入的公式只有用Word自带的公式才会在公式比较高时显得美观</li></ul><p>2.上一个问题的后续，引用公式时加上超链接，以及图片表格的超链接问题</p><ul><li>通通都可以使用题注和交叉引用模块完成。只需注意区分设置好题注中的标签类型与字符，同时交叉引用时设置一下引用内容就可以了</li></ul><p>3.中间删掉了几个公式需要更新编号</p><ul><li>全选需要更改部分，F9即可(更新域)</li></ul><h3 id="Endnote处理文献引用"><a href="#Endnote处理文献引用" class="headerlink" title="Endnote处理文献引用"></a>Endnote处理文献引用</h3><p>参考<a href="https://zhuanlan.zhihu.com/p/25283067" target="_blank" rel="noopener">可乐的知乎专栏</a>就差不多了，需要引用文献时直接拖过去就可以，非常简单。</p><p>注意在最后交稿的时候要把文章最后段的endnote文献集转成普通文本，否则有的电脑可能无法识别。前面的编号部分不管似乎也没什么关系。</p><h3 id="MathType处理公式编号与右对齐"><a href="#MathType处理公式编号与右对齐" class="headerlink" title="MathType处理公式编号与右对齐"></a>MathType处理公式编号与右对齐</h3><p>1.在Word中的MathType栏单击右编号即可插入编号右对齐，编号是自动递增的。</p><p>2.如果不需要插入右对齐的编号，直接点击MathType栏的插入编号，编号仍然是递增的。</p><p>3.需要类似于Word的交叉引用的操作时，在MathType栏中点击插入引用，然后再双击要插入的公式的编号，即可插入引用。但是和交叉引用不一样的是这个引用不是超链接，要跳转到公式的话需要双击而不是Ctrl+左键。</p><p>PS：如果因为域代码问题引发公式显示乱码，全选文档Alt+F9基本可以修复，如果不行还是Google吧:P</p><h3 id="IEEE格式问题"><a href="#IEEE格式问题" class="headerlink" title="IEEE格式问题"></a>IEEE格式问题</h3><p>从IEEE官网下载了citations后发现这个RIS导入endnote后没有月份，但其实IEEE把月份放在了Y1栏里，于是写了份<a href="https://gist.github.com/lichunzhu/be7ff26110b5e4806c5170e34504b4be" target="_blank" rel="noopener">python代码</a>,把Y1栏下面的除月份的字母和’.’以外的东西都忽略掉，同时在控制台输出做一次double check后用新的RIS导进去期刊的月份就是正常的啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Word引用中的题注和交叉引用&quot;&gt;&lt;a href=&quot;#Word引用中的题注和交叉引用&quot; class=&quot;headerlink&quot; title=&quot;Word引用中的题注和交叉引用&quot;&gt;&lt;/a&gt;Word引用中的题注和交叉引用&lt;/h3&gt;&lt;p&gt;1.公式编号问题，公式编号右对齐内容
      
    
    </summary>
    
    
      <category term="科研" scheme="lichunzhu.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 913: Cat and Mouse</title>
    <link href="lichunzhu.github.io/2018/12/24/2018-12-24-LeetCode-problem-913/"/>
    <id>lichunzhu.github.io/2018/12/24/2018-12-24-LeetCode-problem-913/</id>
    <published>2018-12-23T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/cat-and-mouse/" target="_blank" rel="noopener">https://leetcode.com/problems/cat-and-mouse/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>两个玩家分别扮演猫（Cat）和老鼠（Mouse）在无向图上进行游戏，他们轮流行动。</p><p>该图按下述规则给出：graph[a] 是所有结点 b 的列表，使得 ab 是图的一条边。</p><p>老鼠从结点 1 开始并率先出发，猫从结点 2 开始且随后出发，在结点 0 处有一个洞。</p><p>在每个玩家的回合中，他们必须沿着与他们所在位置相吻合的图的一条边移动。例如，如果老鼠位于结点 1，那么它只能移动到 graph[1] 中的（任何）结点去。</p><p>此外，猫无法移动到洞（结点 0）里。</p><p>然后，游戏在出现以下三种情形之一时结束：</p><ul><li>如果猫和老鼠占据相同的结点，猫获胜。</li><li>如果老鼠躲入洞里，老鼠获胜。</li><li>如果某一位置重复出现（即，玩家们的位置和移动顺序都与上一个回合相同），游戏平局。</li></ul><p>给定 graph，并假设两个玩家都以最佳状态参与游戏，如果老鼠获胜，则返回 1；如果猫获胜，则返回 2；如果平局，则返回 0。</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>博弈 图论</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>大概是遇到的最难的LeetCode的题了。看了<a href="https://zhanghuimeng.github.io/post/leetcode-913-cat-and-mouse/" target="_blank" rel="noopener">张慕辉</a>的题解后照搬着写了一遍才感觉有点理解。</p><p>首先定义color[mPos][cPos][turn]表示老鼠走到mPos，猫走到cPos时候的必胜状态，1表示老鼠赢，2表示猫赢(turn也是同样数字定义)</p><p>注意到其中有一些点的胜负状态是确定的，规则如下：</p><ul><li>当mPos = 0，老鼠胜</li><li>当mPos = cPos，猫胜</li></ul><p>因此我们可以由这些确定的状态出发，往前反推，去推理其他状态下的博弈情况。把所有已经确定状态还没有反推的点压入队列。回推时一旦确定一个状态的color就压入队列继续反推，思想有点类似于拓扑排序。</p><p>反推的时候，因为猫鼠都是最佳状态，说明<strong>绝对不会主动走进败局</strong>，且有胜利机会则必走。</p><p>因此，当上一步轮到MOUSE走，当前的color是MOUSE时可以直接染色上一步的状态。</p><p>当前的color是CAT时，老鼠除非是走投无路一定不会走过来，因此记录一下上一状态的出度，遇见一次就出度减一，当出度为零时说明所有该状态的下招都是猫胜，上一状态也只能是猫胜了，记录为猫胜压入队列。</p><p>如果有状态到最后都没被染色，说明这个状态是平局，因为没有被必败也没有必胜，因此只有平了。这个特性推几个例子可以有一些理解。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N ^ {3})$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> cPos, mPos;</span><br><span class="line">    <span class="keyword">int</span> turn;</span><br><span class="line">    node (<span class="keyword">int</span> m, <span class="keyword">int</span> c, <span class="keyword">int</span> t): cPos(c), mPos(m), turn(t) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">catMouseGame</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.size();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> MOUSE = <span class="number">1</span>, CAT = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> color[<span class="number">202</span>][<span class="number">202</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> outDegree[<span class="number">202</span>][<span class="number">202</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">queue</span>&lt;node&gt;q;</span><br><span class="line">        <span class="built_in">memset</span>(color, <span class="number">0</span>, <span class="keyword">sizeof</span>(color));</span><br><span class="line">        <span class="built_in">memset</span>(outDegree, <span class="number">0</span>, <span class="keyword">sizeof</span>(outDegree));</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    color[i][j][CAT] = color[i][j][MOUSE] = MOUSE;</span><br><span class="line">                    q.emplace(i, j, MOUSE);</span><br><span class="line">                    q.emplace(i, j, CAT);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                    color[i][j][CAT] = color[i][j][MOUSE] = CAT;</span><br><span class="line">                    q.emplace(i, j, MOUSE);</span><br><span class="line">                    q.emplace(i, j, CAT);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                outDegree[i][j][MOUSE] = graph[i].size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x: graph[j])</span><br><span class="line">                    <span class="keyword">if</span> (x)</span><br><span class="line">                        outDegree[i][j][CAT]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            node cur = q.front(); q.pop();</span><br><span class="line">            <span class="keyword">int</span> mPos = cur.mPos, cPos = cur.cPos, turn = cur.turn;</span><br><span class="line">            <span class="keyword">if</span> (color[mPos][cPos][turn] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (turn == MOUSE) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x: graph[cPos]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == <span class="number">0</span> || color[mPos][x][CAT]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (color[mPos][cPos][turn] == CAT) &#123;</span><br><span class="line">                        color[mPos][x][CAT] = CAT;</span><br><span class="line">                        q.emplace(mPos, x, CAT);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       outDegree[mPos][x][CAT]--;</span><br><span class="line">                       <span class="keyword">if</span> (outDegree[mPos][x][CAT] == <span class="number">0</span>) &#123;</span><br><span class="line">                           color[mPos][x][CAT] = MOUSE;</span><br><span class="line">                           q.emplace(mPos, x, CAT);</span><br><span class="line">                       &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x: graph[mPos]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (color[x][cPos][MOUSE]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (color[mPos][cPos][turn] == MOUSE) &#123;</span><br><span class="line">                        color[x][cPos][MOUSE] = MOUSE;</span><br><span class="line">                        q.emplace(x, cPos, MOUSE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outDegree[x][cPos][MOUSE]--;</span><br><span class="line">                        <span class="keyword">if</span> (outDegree[x][cPos][MOUSE] == <span class="number">0</span>) &#123;</span><br><span class="line">                            color[x][cPos][MOUSE] = CAT;</span><br><span class="line">                            q.emplace(x, cPos, MOUSE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color[<span class="number">1</span>][<span class="number">2</span>][MOUSE];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/cat-and-mouse/&quot; target=
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="lichunzhu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="博弈" scheme="lichunzhu.github.io/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 964: Least Operators to Express Number</title>
    <link href="lichunzhu.github.io/2018/12/23/2018-12-23-LeetCode-problem-964/"/>
    <id>lichunzhu.github.io/2018/12/23/2018-12-23-LeetCode-problem-964/</id>
    <published>2018-12-22T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/least-operators-to-express-number/" target="_blank" rel="noopener">https://leetcode.com/problems/least-operators-to-express-number/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个正整数 x，我们将会写出一个形如 x (op1) x (op2) x (op3) x … 的表达式，其中每个运算符 op1，op2，… 可以是加、减、乘、除（+，-，*，或是 /）之一。例如，对于 x = 3，我们可以写出表达式 3 * 3 / 3 + 3 - 3，该式的值为 3 。</p><p>在写这样的表达式时，我们需要遵守下面的惯例：</p><ol><li>除运算符（/）返回有理数。</li><li>任何地方都没有括号。</li><li>我们使用通常的操作顺序：乘法和除法发生在加法和减法之前。</li><li>不允许使用一元否定运算符（-）。例如，“x - x” 是一个有效的表达式，因为它只使用减法，但是 “-x + x” 不是，因为它使用了否定运算符。 </li></ol><p>我们希望编写一个能使表达式等于给定的目标值 target 且运算符最少的表达式。返回所用运算符的最少数量。</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>一道有点像数位DP的动态规划题，但是总体来说强度还行。</p><p>因为操作的正整数只有一个，所以拿到该题的第一反应就是把target按求x进制的方式拆分为多个x的幂之和。</p><p>首先来设想假设没有减号(-)的情况，不难发现如果不是为了得到1使用除号都只能增加运算符却对结果没有帮助。同时，表达式中一定有一个正数。把target按x的幂级数分解后，需要的运算符数就是 (达到该幂级数所需运算符数)*(该位上的数字) 之和。</p><blockquote><p>举个例子:<br>x = 3, target = 19<br>按位分解后得到 [1, 0, 2] (从低到高), $19=1+0 \ast 3+2 \ast 3^{2}$<br>需要的运算符数为 2 + 2 * 2 - 1 = 5<br>即为 + 3 / 3 + 3 * 3 + 3 * 3，去掉最首的’+’号答案-1</p></blockquote><p>接下来考虑表达式中存在减号(-)的情况。存在减号时，假设某位的数字为t，得到数字t可以有两种方式：</p><ol><li>加上t个该级数的数字</li><li>由高位减去该级数的数字，减去的个数为(x-t)个</li></ol><p>定义f数组值为需要的最小运算符数，<strong>a[i]</strong>为<strong>i</strong>位上的数字，<strong>bit(i)</strong>为得到<strong>i</strong>位的幂级数所需的运算符数字(含开头的符号)，<strong>f[i][0]</strong>为在第<strong>i</strong>位使用第一种方式，<strong>f[i][1]</strong>为第二种方式，不难推出转移方程为：<br>$f[i][0]=min(f[i - 1][0], f[i - 1][1]) + bit(i) \ast a[i]$<br>$\begin{split}<br>f[i][1]=&amp;min(f[i - 1][0] + (x - a[i]) * bit(i) + bit(i + 1), f[i - 1][1] + \\ &amp;(x - a[i] - 1) \ast bit(i) + bit(i + 1) - bit(i))<br> \end{split}$</p><p>f[i][0]的转移方程不难理解，主要说一下f[i][1]:</p><p>假设低位是没被减的，那么该位就是 高位 - 低位 的运算符之和。</p><p>假设低位是被减的，那么该位转移时<strong>要将低位所使用的被减数换成高一位的被减数，也即是bit(i + 1) - bit(i)部分</strong>。</p><p>同时因为低位已经减掉了一部分，所以<strong>这一位是从x-1开始的</strong>，也即是(x - a[i] - 1)的来历。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N ^ {3})$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_bit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        i--;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leastOpsExpressTarget</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = target;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a, b;</span><br><span class="line">        <span class="keyword">while</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            b.push_back(t % x);</span><br><span class="line">            t /= x;</span><br><span class="line">        &#125;</span><br><span class="line">        a.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : b)</span><br><span class="line">            a.push_back(i);</span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">30</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.size(); i++) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>] = min(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>]) + get_bit(i) * a[i];</span><br><span class="line">            f[i][<span class="number">1</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + (x - a[i]) * get_bit(i) + get_bit(i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>)</span><br><span class="line">                f[i][<span class="number">1</span>] = min(f[i][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">1</span>] + (x - a[i] - <span class="number">1</span>) * get_bit(i) + get_bit(i + <span class="number">1</span>) - get_bit(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(f[a.size() - <span class="number">1</span>][<span class="number">1</span>], f[a.size() - <span class="number">1</span>][<span class="number">0</span>]) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/least-operators-to-expr
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 920: Number of Music Playlists</title>
    <link href="lichunzhu.github.io/2018/12/17/2018-12-17-LeetCode-problem-920/"/>
    <id>lichunzhu.github.io/2018/12/17/2018-12-17-LeetCode-problem-920/</id>
    <published>2018-12-16T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/number-of-music-playlists/" target="_blank" rel="noopener">https://leetcode.com/problems/number-of-music-playlists/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>你的音乐播放器里有 N 首不同的歌，在旅途中，你的旅伴想要听 L 首歌（不一定不同，即，允许歌曲重复）。请你为她按如下规则创建一个播放列表：</p><ul><li>每首歌至少播放一次。</li><li>一首歌只有在其他 K 首歌播放完之后才能再次播放。</li></ul><p>返回可以满足要求的播放列表的数量。由于答案可能非常大，请返回它模 10^9 + 7 的结果。</p><p>其中: 0 &lt;= K &lt; N &lt;= L &lt;= 100</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>动态规划题目，使用f(n,l)表示剩余听n种歌，l个位置，最小间隔为k时的听歌方案。</p><p>转移方程分为两种:</p><ol><li>该位置放的歌前面都没有出现过，则n种歌随便选一种，该种歌前面都不能再选，转移自f(n-1,l-1)</li><li>该位置放的歌前面已经出现过，则最近的k个位置的歌不能再选，只能选(n-k)种，该种歌前面还可以选，转移自f(n,l-1)</li></ol><p>有f(n,l) = f(n-1,l-1)*n + f(n,l-1)*(n-k)</p><p>边界条件:</p><ol><li>n &gt; l 时 l 个位置放不完 n 种歌，为0</li><li>n &lt; k + 1 时 不能保证 k 个位置内不出现同种类的歌曲，为0</li><li>n == l 时 答案为 n 的全排列，不再多言； n == k + 1 时 答案也是 n 的排列，相当于第一首歌和最后一首歌一定一样其他歌全排列</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N \ast L \ast K)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">102</span>][<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">102</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line">    Solution() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">            A[i] = (LL)A[i - <span class="number">1</span>] * i % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numMusicPlaylists</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> L, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N == L || N == K + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> A[N];</span><br><span class="line">        <span class="keyword">if</span> (N &gt; L || N &lt; K + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (f[N][L][K] != <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> f[N][L][K];</span><br><span class="line">        <span class="keyword">int</span> ans = (LL)numMusicPlaylists(N - <span class="number">1</span>, L - <span class="number">1</span>, K) * N % Mod;</span><br><span class="line">        ans += (LL)numMusicPlaylists(N, L - <span class="number">1</span>, K) * (N - K) % Mod;</span><br><span class="line">        ans %= Mod;</span><br><span class="line">        <span class="keyword">return</span> f[N][L][K] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-music-playlis
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 115</title>
    <link href="lichunzhu.github.io/2018/12/16/2018-12-16-LeetCode-contest-115/"/>
    <id>lichunzhu.github.io/2018/12/16/2018-12-16-LeetCode-contest-115/</id>
    <published>2018-12-15T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prison-Cells-After-N-Days"><a href="#Prison-Cells-After-N-Days" class="headerlink" title="Prison Cells After N Days"></a><a href="https://leetcode.com/problems/prison-cells-after-n-days/" target="_blank" rel="noopener">Prison Cells After N Days</a></h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/prison-cells-after-n-days/" target="_blank" rel="noopener">https://leetcode.com/problems/prison-cells-after-n-days/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个仅包含0和1的长度为8的数组(排成一行)，数组进行一次变换的定义如下:</p><ul><li>如果一个元素相邻的元素都为1或都为0，这个元素下一步会变成1</li><li>否则，元素变成0</li></ul><p>(最首元素和最末元素始终没有两个相邻元素所以会变成0)</p><p>求出数组经过$N(1 \leq N \leq 10^{9})$次变换后的值</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>智力</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>咋一看N很大有点吓人，但细细一想数组总的可能情况也只有 $ 2^{8} = 256 $种，而且数组是满足循环性质的，所以数组一定会跑不到<em>N</em>次就出现循环，问题就变得简单了。</p><p>利用二进制记录数组状态，一旦数组重复了以前出现的样子，就不必再计算，把 剩下的步数 除以 循环的长度 取模值，继续步进该数值的步数即是循环<em>N</em>次后的答案。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(256*8)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">toInt</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            x = ((x &lt;&lt; <span class="number">1</span>) + a[i]);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; change(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a) &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">        b.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i + <span class="number">1</span>] == a[i - <span class="number">1</span>])</span><br><span class="line">                b.push_back(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        b.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prisonAfterNDays(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cells, <span class="keyword">int</span> N) &#123;</span><br><span class="line">        <span class="keyword">int</span> i, tmp;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; save_cells;</span><br><span class="line">        save_cells.push_back(cells);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; S;</span><br><span class="line">        S[toInt(cells)] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            cells = change(cells);</span><br><span class="line">            tmp = toInt(cells);</span><br><span class="line">            <span class="keyword">if</span> (S.find(tmp) != S.end())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            S[tmp] = i;</span><br><span class="line">            save_cells.push_back(cells);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == N + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> cells;</span><br><span class="line">        <span class="keyword">int</span> j = S[tmp];</span><br><span class="line">        N = (N - j) % (i - j) + j;</span><br><span class="line">        <span class="keyword">return</span> save_cells[N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Check-Completeness-of-a-Binary-Tree"><a href="#Check-Completeness-of-a-Binary-Tree" class="headerlink" title="Check Completeness of a Binary Tree"></a><a href="https://leetcode.com/problems/check-completeness-of-a-binary-tree/" target="_blank" rel="noopener">Check Completeness of a Binary Tree</a></h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/check-completeness-of-a-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/check-completeness-of-a-binary-tree/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树判断其是否属于完全二叉树得到true or false，关于完全二叉树的定义: <a href="https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank" rel="noopener">complete binary tree</a></p><p>完全二叉树中除最后一层外均有节点填满，且最后一层的节点全部靠左(还是看wiki吧不知道怎么说)</p><p>树的节点数在1到100间</p><h3 id="题目类型-1"><a href="#题目类型-1" class="headerlink" title="题目类型"></a>题目类型</h3><p>树</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>我的办法是首先找到每个节点的深度得到最大深度maxdep，然后统计深度少于maxdep的节点数，要满足等于$2^{maxdep - 1} - 1$</p><p>随后把倒数第二层的所有节点的左右儿子(包括NULL)都放入一个数组，判断数组是否是 左边全是not NULL，右边全是NULL，换句话说如果第一次出现NULL了以后如果后面还有not NULL的节点则不是完全二叉树</p><p>应该有比我更好的办法</p><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N)$</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;TreeNode*, <span class="keyword">int</span>&gt;S;</span><br><span class="line">    <span class="keyword">int</span> maxdep = <span class="number">-1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(TreeNode *cur, <span class="keyword">int</span> dep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        maxdep = max(maxdep, dep);</span><br><span class="line">        S[cur] = dep;</span><br><span class="line">        Dfs(cur-&gt;left, dep + <span class="number">1</span>);</span><br><span class="line">        Dfs(cur-&gt;right,dep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isCompleteTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt;q;</span><br><span class="line">        TreeNode* cur;</span><br><span class="line">        Dfs(root, <span class="number">1</span>);</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt;a;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            cur = q.front();q.pop();</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[cur] == maxdep) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (cnt != (<span class="number">1</span> &lt;&lt; (maxdep - <span class="number">1</span>)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag)</span><br><span class="line">                a.push_back(cur);</span><br><span class="line">            <span class="keyword">if</span> (cur) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[cur] &lt; maxdep - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(cur-&gt;left &amp;&amp; cur-&gt;right))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(cur-&gt;left);</span><br><span class="line">                q.push(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a[i]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag &amp;&amp; a[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Regions-Cut-By-Slashes"><a href="#Regions-Cut-By-Slashes" class="headerlink" title="Regions Cut By Slashes"></a><a href="https://leetcode.com/problems/regions-cut-by-slashes/" target="_blank" rel="noopener">Regions Cut By Slashes</a></h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/regions-cut-by-slashes/" target="_blank" rel="noopener">https://leetcode.com/problems/regions-cut-by-slashes/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>由 1 x 1 的方格中组成 N x N 的网格grid，每个 1 x 1 的网格中包含 /,\或空格，这些字符会将方格划分成一些区域。</p><p>给出每个网格中的字符，求出划分出的区域的个数。（请注意，反斜杠字符是转义的，因此 \ 用 “\“ 表示）</p><p>grid 满足 1 &lt;= grid.length == grid[0].length &lt;= 30 </p><p>具体含义戳链接看一下样例应该能明白得更透彻</p><h3 id="题目类型-2"><a href="#题目类型-2" class="headerlink" title="题目类型"></a>题目类型</h3><p>图论<br>并查集</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>很好玩的题目，咋一看很让人摸不着头脑，但是细细一想这道题可以转换成图论中求联通块的数目的问题。</p><p>把每个 1 x 1 的小方格分为 左边 和 右边 两个，每次连边时只考虑相邻块的左边的块和上面的块：</p><ul><li>连接上面的块时，首先看自己网格，如果是’/‘用左块去连，如果是’\’用右块去连;其次看上面网格，是’\’则连左边块，是’/‘则连右边块</li><li>连接左边的块时，不管左边块是什么，一定是本块的左边块 连 左边网格的右块</li><li>方格为’ ‘, 把该网格的左块和右块连起来</li></ul><p>连边找联通块数目，并查集解决这个问题非常方便，就不多赘述了</p><h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(grid.length ^ {2})$</p><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> fa[<span class="number">10020</span>], n;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_fa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[x] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> fa[x] = get_fa(fa[x]);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Combine</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = get_fa(x);</span><br><span class="line">        y = get_fa(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">            swap(x, y);</span><br><span class="line">        fa[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_sit</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">        y++;</span><br><span class="line">        <span class="keyword">return</span> (x - <span class="number">1</span>) * n + y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">regionsBySlashes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m, sit, sl, sr;</span><br><span class="line">        <span class="keyword">int</span> upsit,leftsit;</span><br><span class="line">        <span class="keyword">int</span> i, j, maxsit = <span class="number">0</span>;</span><br><span class="line">        n = grid.size();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            m = grid[i].size();</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                sit = get_sit(i, j);</span><br><span class="line">                upsit = get_sit(i - <span class="number">1</span>, j);</span><br><span class="line">                leftsit = get_sit(i, j - <span class="number">1</span>);</span><br><span class="line">                sl = <span class="number">2</span>*sit - <span class="number">1</span>;</span><br><span class="line">                sr = <span class="number">2</span>*sit;</span><br><span class="line">                maxsit = max(maxsit, sit);</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">' '</span>) &#123;</span><br><span class="line">                    Combine(sl, sr);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'/'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (grid[i - <span class="number">1</span>][j] == <span class="string">'/'</span>)</span><br><span class="line">                            Combine(upsit * <span class="number">2</span>, sl);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            Combine(upsit * <span class="number">2</span> - <span class="number">1</span>, sl);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Combine(leftsit * <span class="number">2</span>, sl);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (grid[i - <span class="number">1</span>][j] == <span class="string">'/'</span>)</span><br><span class="line">                            Combine(upsit * <span class="number">2</span>, sr);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            Combine(upsit * <span class="number">2</span> - <span class="number">1</span>, sr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Combine(leftsit * <span class="number">2</span>, sl);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= maxsit*<span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (fa[i] == <span class="number">0</span>)</span><br><span class="line">                ans++;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Delete-Columns-to-Make-Sorted-III"><a href="#Delete-Columns-to-Make-Sorted-III" class="headerlink" title="Delete Columns to Make Sorted III"></a><a href="https://leetcode.com/problems/delete-columns-to-make-sorted-iii/" target="_blank" rel="noopener">Delete Columns to Make Sorted III</a></h2><h3 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/delete-columns-to-make-sorted-iii/" target="_blank" rel="noopener">https://leetcode.com/problems/delete-columns-to-make-sorted-iii/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给出一个由<em>N</em>个相同长度的小写字符串组成的数组<em>A</em>，可以选择其中的某列，把所有字符串的该列的字符都删掉。</p><p>例如 A = [“babca”,”bbazb”] 删除集合为 {0, 1, 4}， 最后会剩下 [“bc”,”az”]</p><p>求出最小的集合，满足删除后的数组A中的每个字符串都有字典序不降序 (ie. A[0][0] &lt;= A[0][1] &lt;= … &lt;= A[0][A[0].length - 1])</p><p>其中：</p><ol><li>1 &lt;= A.length &lt;= 100</li><li>1 &lt;= A[i].length &lt;= 100</li></ol><h3 id="题目类型-3"><a href="#题目类型-3" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是披了层皮的最长上升子序列问题，定义第i列小于等于第j列为:</p><blockquote><p>所有A中的字符串都有 A[k][i] &lt;= A[k][j]</p></blockquote><p>如果满足该条件则有转移方程 f[j] = max { f[i] + 1 }</p><p>f[i]的初值为1，求出A中的最长上升子序列长度后 列数 - 长度 即为最终的答案</p><h3 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(A.length \ast {A[i].length ^ {2}})$</p><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">smaller</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; A, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            <span class="keyword">if</span> (A[k][i] &gt; A[k][j])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDeletionSize</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size(), m = A[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> i, maxd = <span class="number">-1</span>, j;</span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">102</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            f[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (smaller(j, i, A, n))</span><br><span class="line">                    f[i] = max(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            maxd = max(maxd, f[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m - maxd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Prison-Cells-After-N-Days&quot;&gt;&lt;a href=&quot;#Prison-Cells-After-N-Days&quot; class=&quot;headerlink&quot; title=&quot;Prison Cells After N Days&quot;&gt;&lt;/a&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="智力" scheme="lichunzhu.github.io/tags/%E6%99%BA%E5%8A%9B/"/>
    
      <category term="树" scheme="lichunzhu.github.io/tags/%E6%A0%91/"/>
    
      <category term="图论" scheme="lichunzhu.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="并查集" scheme="lichunzhu.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 927: three equal parts</title>
    <link href="lichunzhu.github.io/2018/12/13/2018-12-13-LeetCode-problem-927/"/>
    <id>lichunzhu.github.io/2018/12/13/2018-12-13-LeetCode-problem-927/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/three-equal-parts/" target="_blank" rel="noopener">https://leetcode.com/problems/three-equal-parts/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个仅包含0和1的数组A(<em>3&lt;= A.length &lt;= 30000</em>)，将数组分为三块，要求分为三块后的各自块二进制数保证相等，并给出如何分为三块的两个分割点，数组构成数字时可以接受前导0。</p><blockquote><p>举例： [1, 1, 0] 代表 6</p></blockquote><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>智力</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>挺有意思的题目。</p><ul><li>首先不难想到如果要能分为三块那三个块中的1的个数必须相同，否则不可能分出三个相等的块来（同时特判一下数组全是0的情况）；</li><li>然后再将含有1的部分等分为三块以后，如何划分数组剩下的0是问题所在。因为三个块的值都相同，所以我们可以从数组最右边的连续0的个数判断三个块形成的相同的数字的后缀0的个数，这样就能够圈定出每个块的范围了。</li><li>最后还要判断一下三个块去除前导0后能不能保证相等，如果能保证相等就是所求答案；如果不能保证也<strong>一定不会</strong>有解了</li></ul><blockquote><p>举个例子，寻找 [1, 0, 0, 1, 0, 1, 0] 的分块方案</p><p>首先找到三个1的位置，由最后一个块最后只有1个0将数组分为[1, 0]、[0, 1, 0]、[1, 0]</p><p>验证后发现相等，问题得解</p></blockquote><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>代码写的非常凌乱<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; threeEqualParts(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">int</span> i, sum3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] == <span class="number">1</span>)</span><br><span class="line">                sum3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;false_ans(<span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum3 % <span class="number">3</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> false_ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line">        <span class="keyword">int</span> back0;</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (A[i] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        back0 = n - <span class="number">1</span> - i;</span><br><span class="line">        <span class="keyword">if</span> (back0 == n) &#123;</span><br><span class="line">            ans.push_back(<span class="number">0</span>);</span><br><span class="line">            ans.push_back(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;back1;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>, j, k;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tmp += A[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp == sum3 / <span class="number">3</span>) &#123;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">                back1.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = back1[i] + <span class="number">1</span>; j &lt;= back1[i] + back0; j++)</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= n || A[j] == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> false_ans;</span><br><span class="line">            ans.push_back(back1[i] + back0);</span><br><span class="line">        &#125;</span><br><span class="line">        ans[<span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (A[i] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = ans[<span class="number">0</span>] + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (A[j] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = ans[<span class="number">1</span>]; k &lt; n; k++)</span><br><span class="line">            <span class="keyword">if</span> (A[k] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(ans[<span class="number">0</span>] - i == ans[<span class="number">1</span>] - <span class="number">1</span> - j &amp;&amp; ans[<span class="number">0</span>] - i == n - <span class="number">1</span> - k))</span><br><span class="line">            <span class="keyword">return</span> false_ans;</span><br><span class="line">        tmp = ans[<span class="number">0</span>] - i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; tmp; t++)</span><br><span class="line">            <span class="keyword">if</span> (!(A[t + i] == A[t + j] &amp;&amp; A[t + i] == A[t + k]))</span><br><span class="line">                <span class="keyword">return</span> false_ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/three-equal-parts/&quot; tar
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="智力" scheme="lichunzhu.github.io/tags/%E6%99%BA%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 930: binary subarrays with sum</title>
    <link href="lichunzhu.github.io/2018/12/13/2018-12-13-LeetCode-problem-930/"/>
    <id>lichunzhu.github.io/2018/12/13/2018-12-13-LeetCode-problem-930/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/binary-subarrays-with-sum/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-subarrays-with-sum/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个仅包含0和1的数组<em>A</em>(<em>A.length &lt;= 30000</em>)，求非空的和为<em>S</em>(<em>0 &lt;= S &lt;= A.length</em>)的子数组序列个数。</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>智力</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>不算很难的题目，写出来主要是因为最开始用的是滑动窗口过于麻烦，后面才发现部分和两下就解决了，警醒一下。</p><p>解的时候遍历数组A同时求一下部分和cur += A[i]，以当前位置为子区间右端点的满足部分和为S的数目就是部分和为cur - S的端点的数目和，用个f数组存一下数目就好了。</p><p>注意一下因为这样得到的区间数目左侧是开区间，所以开头要来个f[0] = 1。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSubarraysWithSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">30020</span>];</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cur += A[i];</span><br><span class="line">            <span class="keyword">if</span> (cur - S &gt;= <span class="number">0</span>)</span><br><span class="line">                ans += f[cur - S];</span><br><span class="line">            f[cur] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-subarrays-with-s
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="智力" scheme="lichunzhu.github.io/tags/%E6%99%BA%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 932: beautiful array</title>
    <link href="lichunzhu.github.io/2018/12/12/2018-12-12-LeetCode-problem-932/"/>
    <id>lichunzhu.github.io/2018/12/12/2018-12-12-LeetCode-problem-932/</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/beautiful-array/" target="_blank" rel="noopener">https://leetcode.com/problems/beautiful-array/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个数字N &lt;= 1000, 构造一个 1 - N 的排列并保证:</p><blockquote><p>对于每个 i &lt; j，都不存在 k 满足 i &lt; k &lt; j 使得 A[k] * 2 = A[i] + A[j]。</p></blockquote><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>构造</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>构造答案时可以把奇数全部放在左边偶数全部放在右边，奇数和偶数相加为奇数，这样就只可能奇数与奇数间，偶数与偶数间发生矛盾。</p><p>从而想到要保证分出后的奇数数组和偶数数组也要分别为相应的答案(漂亮数组)。因此使用递归的方法可以解决该问题。</p><p>例如对于 N = 5, 则要得到 N = 3 和 N = 2 的漂亮数组, 分别为 {1, 3, 2} 和 {1, 2}, 奇数部分乘以二减去一，偶数部分直接乘以二，即可得到 {1, 5, 3, 2, 4}，构造完成。</p><p>针对递归过程还可以做些优化，没有写。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(N ^ 2)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; beautifulArray(<span class="keyword">int</span> N) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">            ans.push_back(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">2</span>) &#123;</span><br><span class="line">            ans.push_back(<span class="number">1</span>);</span><br><span class="line">            ans.push_back(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (N + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;lef,rig;</span><br><span class="line">        lef = beautifulArray(mid);</span><br><span class="line">        rig = beautifulArray(N - mid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mid; i++)</span><br><span class="line">            ans.push_back(lef[i] * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - mid; i++)</span><br><span class="line">            ans.push_back(rig[i] * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/beautiful-array/&quot; targe
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="构造" scheme="lichunzhu.github.io/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 956: tallest billboard</title>
    <link href="lichunzhu.github.io/2018/12/10/2018-12-10-LeetCode-problem-956/"/>
    <id>lichunzhu.github.io/2018/12/10/2018-12-10-LeetCode-problem-956/</id>
    <published>2018-12-09T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode.com/problems/tallest-billboard/" target="_blank" rel="noopener">https://leetcode.com/problems/tallest-billboard/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给至多20个数字，数字之和&lt;=5000，在其中找到两个不相交的子集保证两子集分别的和相等，同时使得这个和值尽可能大。</p><h3 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h3><p>动态规划</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>定义动态规划数组f[i][j]表示前i个数字中求和为j时所取得的最大和值，将问题转换为一个背包问题。背包的转移分为三种:<em>把该数作为集合1的值，集合2的值和不加入该数。</em>由此得到三个转移方程:</p><ul><li>f[i+1][j+rod[i]] = max(f[i+1][j+rods[i]], f[i][j]+rods[i])</li><li>f[i+1][j-rods[i]] = max(f[i+1][j-rods[i]], f[i][j])</li><li>f[i+1][j] = max(f[i+1][j],f[i][j])</li></ul><p>其中只有在把数字放进集合1的时候才统计其对最大和值的影响；同时为了防止数组和值为负值的时候越界给0加上了5000的偏移量。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(20*10000)$</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">22</span>][<span class="number">10020</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tallestBillboard</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rods)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">5000</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = rods.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j + rods[i] &lt;= <span class="number">10000</span>)</span><br><span class="line">                        f[i + <span class="number">1</span>][j + rods[i]] = max(f[i + <span class="number">1</span>][j + rods[i]], f[i][j] + rods[i]);</span><br><span class="line">                    <span class="keyword">if</span> (j - rods[i] &gt;= <span class="number">0</span>)</span><br><span class="line">                        f[i + <span class="number">1</span>][j - rods[i]] = max(f[i + <span class="number">1</span>][j - rods[i]], f[i][j]);</span><br><span class="line">                    f[i + <span class="number">1</span>][j] = max(f[i + <span class="number">1</span>][j], f[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][<span class="number">5000</span>] == <span class="number">-1</span> ? <span class="number">0</span> : f[n][<span class="number">5000</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/tallest-billboard/&quot; tar
      
    
    </summary>
    
    
      <category term="算法" scheme="lichunzhu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="lichunzhu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to Chauncy Blog</title>
    <link href="lichunzhu.github.io/2018/12/07/2018-12-07-hello-blog/"/>
    <id>lichunzhu.github.io/2018/12/07/2018-12-07-hello-blog/</id>
    <published>2018-12-06T16:00:00.000Z</published>
    <updated>2020-01-10T16:21:15.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“Let it be. ”</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Chauncy 的 Blog 终于开通了。</p><p><a href="#build">跳过废话，直接看遇到的坑</a></p><p>一转眼时间就已经来到了8102年了，上次开博客已经是很久很久以前了，那个时候博客还是在博客园上，可惜当时虽然开了好头却没能坚持下来，到最后更新的篇数也是寥寥无几。前一阵想起来回过头来找一找以前的博客，却发现已经连用户名都已回忆不起来了。</p><p>想做这个博客也是想了很久的事情。</p><p>一来想要沉下心来做点事情，之前的动手查资料获取信息的能力实在是太烂，想起来做点什么总是遇到一堆怪七八糟的问题然后也不知道如何解决。在github开博的事情很早就想做，但是却因为jekyll老是有问题没弄成功过，这一问题经过这个暑假终于有所好转；</p><p>二来是发现以前老师和前辈说的话实在是有道理，人的记忆具有很强的<strong>时间效应</strong>。有的代码有的东西写的时候还挺清楚的，过一段时间再看又要花不少时间来回忆。写博客一来可以起到巩固知识二来可以<strong>备忘</strong>，于是决定做起来。</p><p>立个flag，这次要好好写下去。</p><p id="build"></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>接下来说说搭建这个博客的遇到的一些小问题。</p><p>这个博客主要的实现主题通通来自于<a href="http://huangxuan.me/" target="_blank" rel="noopener">hux前辈</a>的博客和主题，因为本人的前端水平实在是有限，所以博客也基本就是套了<a href="https://github.com/Huxpro/huxblog-boilerplate" target="_blank" rel="noopener">huxblog-boilerplate</a>，再改了一点自己的东西。在这里非常感谢前辈无私的分享。大部分的内容跟着里面的readme做就能做出来，这里也只说一点自己遇到的问题和小坑。</p><ol><li><p>安装jekyll前先要安装<a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">Ruby + Devkit</a>,版本要选高一点的，老版本的可能装不了jekyll。然后就是Windows安装Ruby的时候一定要<strong>按照默认安装目录安装</strong>。我装Ruby的时候装到了自己定的目录下面然后<code>gem install bundle</code>是可以的，但jekyll就报奇奇怪怪的错误，Google了一阵也没有弄明白，以为是版本号的问题费了不少事情。</p></li><li><p>个人将boilerplate的代码_layout目录下的<a href="https://github.com/Huxpro/huxpro.github.io/blob/master/_layouts/keynote.html" target="_blank" rel="noopener">keynote.html</a>、<a href="https://github.com/Huxpro/huxpro.github.io/blob/master/_layouts/page.html" target="_blank" rel="noopener">page.html</a>等文件里面的:<br>`{%  site.duoshuo_share && site.duoshuo_username %}`改为`{%  site.duoshuo_share and site.duoshuo_username %}`<br>`{%  tag[1].size > {{site.featured-condition-size}} %}`改为`{%  tag[1].size > site.featured-condition-size %}`<br><br>没有修改之前会报警告。<br><br><em>P.S.</em>:其实多说已经凉了这段删掉也无妨。</p></li><li><p>本地写好文件想通过<code>jekyll s</code>跑起来的时候发现端口占用，原因是jekyll网站跑起来后默认使用127.0.0.1的4000端口，而福昕阅读器的服务也会占用这一端口，解决方案是要不关掉福昕阅读器的服务要不通过<code>jekyll s --port 端口号</code>让网站跑在其它端口上，个人更倾向于第二种解决方法。</p></li><li><p>要在markdown中引用liquid代码时一定要用liquid中的 raw 代码块进行标注。否则jekyll渲染时会把liquid代码当作是正常代码来渲染。</p></li></ol><p>最后再唠叨一点关于jekyll的理解吧：</p><ul><li><p>_includes 主要存放网页的 head, feet部分</p></li><li><p>_layouts 主要定义网页的排版等等</p></li><li><p>_posts 文章存放部分，写好的博客markdown文件都在这里</p></li><li><p>_site 本地运行<code>jekyll s</code>后会生成的网页文件夹</p></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回顾这个博客的诞生，纯粹是出于个人兴趣。感谢无私地在网上分享知识的人们，提供模板的<a href="http://huangxuan.me/" target="_blank" rel="noopener">hux前辈</a>，<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>以及<a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>，没有他们的分享就不会有这个blog，也希望有朝一日这个blog的内容也可以帮助到其他的人。</p><blockquote><p>人生如逆旅 我亦是行人<br></p><p align="right">—苏轼</p></blockquote><h2 id="后后记"><a href="#后后记" class="headerlink" title="后后记"></a>后后记</h2><p>博客已经移到hexo next了，next真香hhh</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;“Let it be. ”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Chauncy 的 Blog 终于开通了。&lt;
      
    
    </summary>
    
    
      <category term="生活" scheme="lichunzhu.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
